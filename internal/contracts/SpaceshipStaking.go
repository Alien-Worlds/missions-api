// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package SpaceshipStaking

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ISpaceshipStakingMission is an auto generated low-level Go binding around an user-defined struct.
type ISpaceshipStakingMission struct {
	BoardingTime  uint64
	LaunchTime    uint64
	Duration      uint64
	MissionType   uint64
	Reward        *big.Int
	SpaceshipCost *big.Int
	MissionPower  *big.Int
	Description   string
	Name          string
	BoostCounters []*big.Int
	BoostPrices   []*big.Int
	NftInfo       ISpaceshipStakingNFTInfo
}

// ISpaceshipStakingNFTInfo is an auto generated low-level Go binding around an user-defined struct.
type ISpaceshipStakingNFTInfo struct {
	ContractAddress common.Address
	TokenURI        string
}

// ISpaceshipStakingRewardInfo is an auto generated low-level Go binding around an user-defined struct.
type ISpaceshipStakingRewardInfo struct {
	InvestedTLM    *big.Int
	InvestedBNB    *big.Int
	RewardTLM      *big.Int
	RewardNFTCount *big.Int
}

// SpaceshipStakingABI is the input ABI used to generate the binding from.
const SpaceshipStakingABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TLMToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"MissionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spaceshipCount\",\"type\":\"uint256\"}],\"name\":\"MissionJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investedTLM\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardTLM\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investedBNB\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TLMToken\",\"outputs\":[{\"internalType\":\"contractIBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_missionNum\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"investedTLM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investedBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTLM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardNFTCount\",\"type\":\"uint256\"}],\"internalType\":\"structISpaceshipStaking.RewardInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"boardingTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"launchTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"missionType\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spaceshipCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"missionPower\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"boostCounters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"boostPrices\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"internalType\":\"structISpaceshipStaking.NFTInfo\",\"name\":\"nftInfo\",\"type\":\"tuple\"}],\"internalType\":\"structISpaceshipStaking.Mission\",\"name\":\"_newMission\",\"type\":\"tuple\"}],\"name\":\"createMission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_missionNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spaceshipCount\",\"type\":\"uint256\"}],\"name\":\"joinToMission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"missionToUsersInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ships\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BNBAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"missions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"boardingTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"launchTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"missionType\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spaceshipCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"missionPower\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"internalType\":\"structISpaceshipStaking.NFTInfo\",\"name\":\"nftInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"missionsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_missionNum\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// SpaceshipStakingBin is the compiled bytecode used for deploying new contracts.
var SpaceshipStakingBin = "0x608060405260006003553480156200001657600080fd5b5060405162003a3e38038062003a3e83398181016040528101906200003c919062000153565b60006200004e6200013460201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001cd565b600033905090565b6000815190506200014d81620001b3565b92915050565b6000602082840312156200016657600080fd5b600062000176848285016200013c565b91505092915050565b60006200018c8262000193565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001be816200017f565b8114620001ca57600080fd5b50565b61386180620001dd6000396000f3fe60806040526004361061009c5760003560e01c8063715018a611610064578063715018a6146101bd5780638da5cb5b146101d4578063b6d25495146101ff578063d2d7231f1461022a578063e2d18bee14610267578063f2fde38b146102a45761009c565b806325fbc80d146100a15780632c8fe526146100df5780632e1a7d4d1461012557806347e4beee146101625780634dc2fd6b1461018d575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190612766565b6102cd565b6040516100d69291906134f9565b60405180910390f35b3480156100eb57600080fd5b5061010660048036038101906101019190612714565b6102fe565b60405161011c9a99989796959493929190613559565b60405180910390f35b34801561013157600080fd5b5061014c60048036038101906101479190612714565b6105d4565b60405161015991906131cb565b60405180910390f35b34801561016e57600080fd5b50610177610961565b60405161018491906131e6565b60405180910390f35b6101a760048036038101906101a291906127a2565b610987565b6040516101b491906131cb565b60405180910390f35b3480156101c957600080fd5b506101d2610d55565b005b3480156101e057600080fd5b506101e9610ea8565b6040516101f69190613120565b60405180910390f35b34801561020b57600080fd5b50610214610ed1565b60405161022191906134de565b60405180910390f35b34801561023657600080fd5b50610251600480360381019061024c9190612714565b610ed7565b60405161025e91906134c3565b60405180910390f35b34801561027357600080fd5b5061028e600480360381019061028991906126d3565b610f04565b60405161029b91906131cb565b60405180910390f35b3480156102b057600080fd5b506102cb60048036038101906102c69190612681565b6114e6565b005b6004602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b60026020528060005260406000206000915090508060000160009054906101000a900467ffffffffffffffff16908060000160089054906101000a900467ffffffffffffffff16908060000160109054906101000a900467ffffffffffffffff16908060000160189054906101000a900467ffffffffffffffff1690806001015490806002015490806003015490806004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104245780601f106103f957610100808354040283529160200191610424565b820191906000526020600020905b81548152906001019060200180831161040757829003601f168201915b505050505090806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104c25780601f10610497576101008083540402835291602001916104c2565b820191906000526020600020905b8154815290600101906020018083116104a557829003601f168201915b505050505090806008016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105c65780601f1061059b576101008083540402835291602001916105c6565b820191906000526020600020905b8154815290600101906020018083116105a957829003601f168201915b50505050508152505090508a565b60006105de61215c565b6105e7836116a8565b905042610619826040015167ffffffffffffffff16836020015167ffffffffffffffff16611b0090919063ffffffff16565b10610659576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610650906132e3565b60405180910390fd5b6106616121eb565b61066b8483611b55565b905060006004600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060006004600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3361077984604001518560000151611b0090919063ffffffff16565b6040518363ffffffff1660e01b81526004016107969291906131a2565b602060405180830381600087803b1580156107b057600080fd5b505af11580156107c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e891906126aa565b503373ffffffffffffffffffffffffffffffffffffffff166108fc82602001519081150290604051600060405180830381858888f19350505050158015610833573d6000803e3d6000fd5b50600082610160015160000151905060005b82606001518110156108f5578173ffffffffffffffffffffffffffffffffffffffff1663d0def52133866101600151602001516040518363ffffffff1660e01b8152600401610895929190613172565b602060405180830381600087803b1580156108af57600080fd5b505af11580156108c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e7919061273d565b508080600101915050610845565b503373ffffffffffffffffffffffffffffffffffffffff16857f3f0d190fee71fcedf315c1a691ca936a8893467ce62d0bb52e5643ded084fe4684600001518560400151866020015160405161094d93929190613522565b60405180910390a360019350505050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008082116109cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c2906133e3565b60405180910390fd5b6109d361215c565b6109dc846116a8565b905042816020015167ffffffffffffffff1611610a2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2590613323565b60405180910390fd5b42816000015167ffffffffffffffff1610610a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7590613223565b60405180910390fd5b60003490506000849050610a90612213565b6004600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000816000015114610b6f576000610b198583611d3b565b9050610b32818660c00151611dee90919063ffffffff16565b8560c0018181525050610b52826000015184611b0090919063ffffffff16565b9250610b6b826020015185611b0090919063ffffffff16565b9350505b610b77612213565b604051806040016040528084815260200185815250905080600460008a815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050506000610c028683611d3b565b9050610c1b818760c00151611b0090919063ffffffff16565b600260008b8152602001908152602001600020600301819055506000610c41878a611e38565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610ca29392919061313b565b602060405180830381600087803b158015610cbc57600080fd5b505af1158015610cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf491906126aa565b503373ffffffffffffffffffffffffffffffffffffffff168a7fceb49b5adb5e3737df9e0679d210f1006878fb83bf58974f7279b0c79460898b8b604051610d3c91906134de565b60405180910390a3600197505050505050505092915050565b610d5d611e59565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de190613403565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60035481565b610edf6121eb565b610ee761215c565b610ef0836116a8565b9050610efc8382611b55565b915050919050565b6000610f0e611e59565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9290613403565b60405180910390fd5b816000015167ffffffffffffffff16826020015167ffffffffffffffff1611610ff9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff0906133a3565b60405180910390fd5b42826020015167ffffffffffffffff1611611049576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104090613423565b60405180910390fd5b6000826040015167ffffffffffffffff161161109a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109190613363565b60405180910390fd5b60008260800151116110e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d8906132c3565b60405180910390fd5b60008260a0015111611128576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111f90613303565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168261016001516000015173ffffffffffffffffffffffffffffffffffffffff1614156111a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119890613383565b60405180910390fd5b6000826101600151602001515114156111ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e690613343565b60405180910390fd5b6111f882611e61565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333085608001516040518463ffffffff1660e01b815260040161125b9392919061313b565b602060405180830381600087803b15801561127557600080fd5b505af1158015611289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad91906126aa565b5060006003549050826002600083815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160000160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506080820151816001015560a0820151816002015560c0820151816003015560e08201518160040190805190602001906113bf92919061222d565b506101008201518160050190805190602001906113dd92919061222d565b506101208201518160060190805190602001906113fb9291906122ad565b506101408201518160070190805190602001906114199291906122ad565b506101608201518160080160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908051906020019061148792919061222d565b505050905050600360008154809291906001019190505550807f280fd1c13afdf05ef9c7dbd512eed44cfa4545e4c471c2673baf1d275a3d8fd98461010001516040516114d49190613201565b60405180910390a26001915050919050565b6114ee611e59565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461157b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157290613403565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156115eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e290613263565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6116b061215c565b81600354116116f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116eb90613463565b60405180910390fd5b60026000838152602001908152602001600020604051806101800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118925780601f1061186757610100808354040283529160200191611892565b820191906000526020600020905b81548152906001019060200180831161187557829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119345780601f1061190957610100808354040283529160200191611934565b820191906000526020600020905b81548152906001019060200180831161191757829003601f168201915b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561198c57602002820191906000526020600020905b815481526020019060010190808311611978575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156119e457602002820191906000526020600020905b8154815260200190600101908083116119d0575b50505050508152602001600882016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611aec5780601f10611ac157610100808354040283529160200191611aec565b820191906000526020600020905b815481529060010190602001808311611acf57829003601f168201915b505050505081525050815250509050919050565b600080828401905083811015611b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4290613283565b60405180910390fd5b8091505092915050565b611b5d6121eb565b42826020015167ffffffffffffffff1610611bad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba490613243565b60405180910390fd5b611bb5612213565b6004600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000611c328483611d3b565b905060008111611c77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6e90613483565b60405180910390fd5b6000611cd8611c84611fd2565b611cca8760c00151611cbc86611cae611c9b611fd2565b8c60800151611fe690919063ffffffff16565b611fe690919063ffffffff16565b61205690919063ffffffff16565b61205690919063ffffffff16565b9050611ce26121eb565b6040518060800160405280611cfb888760000151611e38565b8152602001856020015181526020018381526020016005866000015111611d26578560000151611d29565b60055b81525090508094505050505092915050565b600080600190506000846101200151511115611dce5760006001856101200151510390505b60008110158015611d7657508461012001515181105b15611dcc578461014001518181518110611d8c57fe5b6020026020010151846020015110611dbe578461012001518181518110611daf57fe5b60200260200101519150611dcc565b808060019003915050611d60565b505b611de5818460000151611fe690919063ffffffff16565b91505092915050565b6000611e3083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506120a0565b905092915050565b6000611e518360a0015183611fe690919063ffffffff16565b905092915050565b600033905090565b806101400151518161012001515114611eaf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea6906132a3565b60405180910390fd5b60018161012001515111611ec257611fcf565b60005b60018261012001515103811015611fcd578161012001516001820181518110611eea57fe5b60200260200101518261012001518281518110611f0357fe5b602002602001015110611f4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f42906134a3565b60405180910390fd5b8161014001516001820181518110611f5f57fe5b60200260200101518261014001518281518110611f7857fe5b602002602001015110611fc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb790613443565b60405180910390fd5b8080600101915050611ec5565b505b50565b60006b033b2e3c9fd0803ce8000000905090565b600080831415611ff95760009050612050565b600082840290508284828161200a57fe5b041461204b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612042906133c3565b60405180910390fd5b809150505b92915050565b600061209883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506120fb565b905092915050565b60008383111582906120e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120df9190613201565b60405180910390fd5b5060008385039050809150509392505050565b60008083118290612142576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121399190613201565b60405180910390fd5b50600083858161214e57fe5b049050809150509392505050565b604051806101800160405280600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081526020016121e56122fa565b81525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061226e57805160ff191683800117855561229c565b8280016001018555821561229c579182015b8281111561229b578251825591602001919060010190612280565b5b5090506122a9919061232a565b5090565b8280548282559060005260206000209081019282156122e9579160200282015b828111156122e85782518255916020019190600101906122cd565b5b5090506122f6919061232a565b5090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b5b8082111561234357600081600090555060010161232b565b5090565b600081359050612356816137cf565b92915050565b600082601f83011261236d57600080fd5b813561238061237b8261363b565b61360a565b915081818352602084019350602081019050838560208402820111156123a557600080fd5b60005b838110156123d557816123bb8882612642565b8452602084019350602083019250506001810190506123a8565b5050505092915050565b6000815190506123ee816137e6565b92915050565b600082601f83011261240557600080fd5b813561241861241382613667565b61360a565b9150808252602083016020830185838301111561243457600080fd5b61243f83828461377a565b50505092915050565b6000610180828403121561245b57600080fd5b61246661018061360a565b905060006124768482850161266c565b600083015250602061248a8482850161266c565b602083015250604061249e8482850161266c565b60408301525060606124b28482850161266c565b60608301525060806124c684828501612642565b60808301525060a06124da84828501612642565b60a08301525060c06124ee84828501612642565b60c08301525060e082013567ffffffffffffffff81111561250e57600080fd5b61251a848285016123f4565b60e08301525061010082013567ffffffffffffffff81111561253b57600080fd5b612547848285016123f4565b6101008301525061012082013567ffffffffffffffff81111561256957600080fd5b6125758482850161235c565b6101208301525061014082013567ffffffffffffffff81111561259757600080fd5b6125a38482850161235c565b6101408301525061016082013567ffffffffffffffff8111156125c557600080fd5b6125d1848285016125de565b6101608301525092915050565b6000604082840312156125f057600080fd5b6125fa604061360a565b9050600061260a84828501612347565b600083015250602082013567ffffffffffffffff81111561262a57600080fd5b612636848285016123f4565b60208301525092915050565b600081359050612651816137fd565b92915050565b600081519050612666816137fd565b92915050565b60008135905061267b81613814565b92915050565b60006020828403121561269357600080fd5b60006126a184828501612347565b91505092915050565b6000602082840312156126bc57600080fd5b60006126ca848285016123df565b91505092915050565b6000602082840312156126e557600080fd5b600082013567ffffffffffffffff8111156126ff57600080fd5b61270b84828501612448565b91505092915050565b60006020828403121561272657600080fd5b600061273484828501612642565b91505092915050565b60006020828403121561274f57600080fd5b600061275d84828501612657565b91505092915050565b6000806040838503121561277957600080fd5b600061278785828601612642565b925050602061279885828601612347565b9150509250929050565b600080604083850312156127b557600080fd5b60006127c385828601612642565b92505060206127d485828601612642565b9150509250929050565b6127e781613720565b82525050565b6127f6816136c4565b82525050565b612805816136c4565b82525050565b612814816136d6565b82525050565b61282381613732565b82525050565b600061283482613697565b61283e81856136a2565b935061284e818560208601613789565b612857816137be565b840191505092915050565b600061286d82613697565b61287781856136b3565b9350612887818560208601613789565b612890816137be565b840191505092915050565b60006128a86034836136b3565b91507f5b452d36355d202d20526567697374726174696f6e206f6e206d697373696f6e60008301527f207374696c6c206e6f74206c61756e636865642e0000000000000000000000006020830152604082019050919050565b600061290e6036836136b3565b91507f5b452d38395d202d2043616e27742063616c63756c617465207265776172642060008301527f6265666f7265206d697373696f6e206c61756e63682e000000000000000000006020830152604082019050919050565b60006129746026836136b3565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006129da601b836136b3565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000612a1a6024836136b3565b91507f5b452d3139345d202d20426f6f7374206c656e677468206973206e6f7420657160008301527f75616c2e000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612a806020836136b3565b91507f5b452d34325d202d205265776172642063616e27742062652061207a65726f2e6000830152602082019050919050565b6000612ac0602c836136b3565b91507f5b452d3134305d202d2043616e2774207769746864726177206265666f72652060008301527f6d697373696f6e20656e642e00000000000000000000000000000000000000006020830152604082019050919050565b6000612b266028836136b3565b91507f5b452d34335d202d2053706163657368697020636f73742063616e277420626560008301527f2061207a65726f2e0000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612b8c603e836136b3565b91507f5b452d36345d202d20526567697374726174696f6e20636c6f7365642062656360008301527f61757365206d697373696f6e20616c7265616479206c61756e636865642e00006020830152604082019050919050565b6000612bf26026836136b3565b91507f5b452d34355d202d204e465420746f6b656e207572692063616e27742062652060008301527f656d7074792e00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612c586022836136b3565b91507f5b452d34305d202d204475726174696f6e2063616e27742062652061207a657260008301527f6f2e0000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612cbe602c836136b3565b91507f5b452d34345d202d204e465420636f6e74726163742063616e2774206265207a60008301527f65726f20616464726573732e00000000000000000000000000000000000000006020830152604082019050919050565b6000612d24602d836136b3565b91507f5b452d33385d202d20426f617264696e672074696d65206c657373207468656e60008301527f206c61756e63682074696d652e000000000000000000000000000000000000006020830152604082019050919050565b6000612d8a6021836136b3565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612df06029836136b3565b91507f5b452d36335d202d2053706163657368697020636f756e742063616e2774206260008301527f652061207a65726f2e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000612e566020836136b3565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000612e96602c836136b3565b91507f5b452d33395d202d204c61756e63682074696d65206c6573732063757272656e60008301527f742074696d657374616d702e00000000000000000000000000000000000000006020830152604082019050919050565b6000612efc6023836136b3565b91507f5b452d3230305d202d2057726f6e6720626f6f737420707269636573206f726460008301527f65722e00000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612f62601b836136b3565b91507f5b452d38385d202d204d697373696f6e206e6f742065786973742e00000000006000830152602082019050919050565b6000612fa2602e836136b3565b91507f5b452d39305d202d20596f7520686176656e2774207265776172647320666f7260008301527f2074686973206d697373696f6e2e0000000000000000000000000000000000006020830152604082019050919050565b60006130086024836136b3565b91507f5b452d3139395d202d2057726f6e6720626f6f737420636f756e746572206f7260008301527f6465722e000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060408301600083015161307960008601826127ed565b50602083015184820360208601526130918282612829565b9150508091505092915050565b6080820160008201516130b460008501826130f3565b5060208201516130c760208501826130f3565b5060408201516130da60408501826130f3565b5060608201516130ed60608501826130f3565b50505050565b6130fc81613702565b82525050565b61310b81613702565b82525050565b61311a8161370c565b82525050565b600060208201905061313560008301846127fc565b92915050565b600060608201905061315060008301866127de565b61315d60208301856127fc565b61316a6040830184613102565b949350505050565b600060408201905061318760008301856127de565b81810360208301526131998184612862565b90509392505050565b60006040820190506131b760008301856127de565b6131c46020830184613102565b9392505050565b60006020820190506131e0600083018461280b565b92915050565b60006020820190506131fb600083018461281a565b92915050565b6000602082019050818103600083015261321b8184612862565b905092915050565b6000602082019050818103600083015261323c8161289b565b9050919050565b6000602082019050818103600083015261325c81612901565b9050919050565b6000602082019050818103600083015261327c81612967565b9050919050565b6000602082019050818103600083015261329c816129cd565b9050919050565b600060208201905081810360008301526132bc81612a0d565b9050919050565b600060208201905081810360008301526132dc81612a73565b9050919050565b600060208201905081810360008301526132fc81612ab3565b9050919050565b6000602082019050818103600083015261331c81612b19565b9050919050565b6000602082019050818103600083015261333c81612b7f565b9050919050565b6000602082019050818103600083015261335c81612be5565b9050919050565b6000602082019050818103600083015261337c81612c4b565b9050919050565b6000602082019050818103600083015261339c81612cb1565b9050919050565b600060208201905081810360008301526133bc81612d17565b9050919050565b600060208201905081810360008301526133dc81612d7d565b9050919050565b600060208201905081810360008301526133fc81612de3565b9050919050565b6000602082019050818103600083015261341c81612e49565b9050919050565b6000602082019050818103600083015261343c81612e89565b9050919050565b6000602082019050818103600083015261345c81612eef565b9050919050565b6000602082019050818103600083015261347c81612f55565b9050919050565b6000602082019050818103600083015261349c81612f95565b9050919050565b600060208201905081810360008301526134bc81612ffb565b9050919050565b60006080820190506134d8600083018461309e565b92915050565b60006020820190506134f36000830184613102565b92915050565b600060408201905061350e6000830185613102565b61351b6020830184613102565b9392505050565b60006060820190506135376000830186613102565b6135446020830185613102565b6135516040830184613102565b949350505050565b60006101408201905061356f600083018d613111565b61357c602083018c613111565b613589604083018b613111565b613596606083018a613111565b6135a36080830189613102565b6135b060a0830188613102565b6135bd60c0830187613102565b81810360e08301526135cf8186612862565b90508181036101008301526135e48185612862565b90508181036101208301526135f98184613061565b90509b9a5050505050505050505050565b6000604051905081810181811067ffffffffffffffff82111715613631576136306137bc565b5b8060405250919050565b600067ffffffffffffffff821115613656576136556137bc565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613682576136816137bc565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006136cf826136e2565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600061372b82613756565b9050919050565b600061373d82613744565b9050919050565b600061374f826136e2565b9050919050565b600061376182613768565b9050919050565b6000613773826136e2565b9050919050565b82818337600083830152505050565b60005b838110156137a757808201518184015260208101905061378c565b838111156137b6576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b6137d8816136c4565b81146137e357600080fd5b50565b6137ef816136d6565b81146137fa57600080fd5b50565b61380681613702565b811461381157600080fd5b50565b61381d8161370c565b811461382857600080fd5b5056fea2646970667358221220080fdf54546f485598c799ff7c4612f7a40897ad604bc515c6035cc5131e5a7064736f6c63430007020033"

// DeploySpaceshipStaking deploys a new Ethereum contract, binding an instance of SpaceshipStaking to it.
func DeploySpaceshipStaking(auth *bind.TransactOpts, backend bind.ContractBackend, _TLMToken common.Address) (common.Address, *types.Transaction, *SpaceshipStaking, error) {
	parsed, err := abi.JSON(strings.NewReader(SpaceshipStakingABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SpaceshipStakingBin), backend, _TLMToken)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SpaceshipStaking{SpaceshipStakingCaller: SpaceshipStakingCaller{contract: contract}, SpaceshipStakingTransactor: SpaceshipStakingTransactor{contract: contract}, SpaceshipStakingFilterer: SpaceshipStakingFilterer{contract: contract}}, nil
}

// SpaceshipStaking is an auto generated Go binding around an Ethereum contract.
type SpaceshipStaking struct {
	SpaceshipStakingCaller     // Read-only binding to the contract
	SpaceshipStakingTransactor // Write-only binding to the contract
	SpaceshipStakingFilterer   // Log filterer for contract events
}

// SpaceshipStakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type SpaceshipStakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SpaceshipStakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SpaceshipStakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SpaceshipStakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SpaceshipStakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SpaceshipStakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SpaceshipStakingSession struct {
	Contract     *SpaceshipStaking // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SpaceshipStakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SpaceshipStakingCallerSession struct {
	Contract *SpaceshipStakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// SpaceshipStakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SpaceshipStakingTransactorSession struct {
	Contract     *SpaceshipStakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// SpaceshipStakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type SpaceshipStakingRaw struct {
	Contract *SpaceshipStaking // Generic contract binding to access the raw methods on
}

// SpaceshipStakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SpaceshipStakingCallerRaw struct {
	Contract *SpaceshipStakingCaller // Generic read-only contract binding to access the raw methods on
}

// SpaceshipStakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SpaceshipStakingTransactorRaw struct {
	Contract *SpaceshipStakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSpaceshipStaking creates a new instance of SpaceshipStaking, bound to a specific deployed contract.
func NewSpaceshipStaking(address common.Address, backend bind.ContractBackend) (*SpaceshipStaking, error) {
	contract, err := bindSpaceshipStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SpaceshipStaking{SpaceshipStakingCaller: SpaceshipStakingCaller{contract: contract}, SpaceshipStakingTransactor: SpaceshipStakingTransactor{contract: contract}, SpaceshipStakingFilterer: SpaceshipStakingFilterer{contract: contract}}, nil
}

// NewSpaceshipStakingCaller creates a new read-only instance of SpaceshipStaking, bound to a specific deployed contract.
func NewSpaceshipStakingCaller(address common.Address, caller bind.ContractCaller) (*SpaceshipStakingCaller, error) {
	contract, err := bindSpaceshipStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SpaceshipStakingCaller{contract: contract}, nil
}

// NewSpaceshipStakingTransactor creates a new write-only instance of SpaceshipStaking, bound to a specific deployed contract.
func NewSpaceshipStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*SpaceshipStakingTransactor, error) {
	contract, err := bindSpaceshipStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SpaceshipStakingTransactor{contract: contract}, nil
}

// NewSpaceshipStakingFilterer creates a new log filterer instance of SpaceshipStaking, bound to a specific deployed contract.
func NewSpaceshipStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*SpaceshipStakingFilterer, error) {
	contract, err := bindSpaceshipStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SpaceshipStakingFilterer{contract: contract}, nil
}

// bindSpaceshipStaking binds a generic wrapper to an already deployed contract.
func bindSpaceshipStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SpaceshipStakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SpaceshipStaking *SpaceshipStakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SpaceshipStaking.Contract.SpaceshipStakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SpaceshipStaking *SpaceshipStakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SpaceshipStaking.Contract.SpaceshipStakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SpaceshipStaking *SpaceshipStakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SpaceshipStaking.Contract.SpaceshipStakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SpaceshipStaking *SpaceshipStakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SpaceshipStaking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SpaceshipStaking *SpaceshipStakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SpaceshipStaking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SpaceshipStaking *SpaceshipStakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SpaceshipStaking.Contract.contract.Transact(opts, method, params...)
}

// TLMToken is a free data retrieval call binding the contract method 0x47e4beee.
//
// Solidity: function TLMToken() view returns(address)
func (_SpaceshipStaking *SpaceshipStakingCaller) TLMToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SpaceshipStaking.contract.Call(opts, &out, "TLMToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TLMToken is a free data retrieval call binding the contract method 0x47e4beee.
//
// Solidity: function TLMToken() view returns(address)
func (_SpaceshipStaking *SpaceshipStakingSession) TLMToken() (common.Address, error) {
	return _SpaceshipStaking.Contract.TLMToken(&_SpaceshipStaking.CallOpts)
}

// TLMToken is a free data retrieval call binding the contract method 0x47e4beee.
//
// Solidity: function TLMToken() view returns(address)
func (_SpaceshipStaking *SpaceshipStakingCallerSession) TLMToken() (common.Address, error) {
	return _SpaceshipStaking.Contract.TLMToken(&_SpaceshipStaking.CallOpts)
}

// CalculateReward is a free data retrieval call binding the contract method 0xd2d7231f.
//
// Solidity: function calculateReward(uint256 _missionNum) view returns((uint256,uint256,uint256,uint256))
func (_SpaceshipStaking *SpaceshipStakingCaller) CalculateReward(opts *bind.CallOpts, _missionNum *big.Int) (ISpaceshipStakingRewardInfo, error) {
	var out []interface{}
	err := _SpaceshipStaking.contract.Call(opts, &out, "calculateReward", _missionNum)

	if err != nil {
		return *new(ISpaceshipStakingRewardInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ISpaceshipStakingRewardInfo)).(*ISpaceshipStakingRewardInfo)

	return out0, err

}

// CalculateReward is a free data retrieval call binding the contract method 0xd2d7231f.
//
// Solidity: function calculateReward(uint256 _missionNum) view returns((uint256,uint256,uint256,uint256))
func (_SpaceshipStaking *SpaceshipStakingSession) CalculateReward(_missionNum *big.Int) (ISpaceshipStakingRewardInfo, error) {
	return _SpaceshipStaking.Contract.CalculateReward(&_SpaceshipStaking.CallOpts, _missionNum)
}

// CalculateReward is a free data retrieval call binding the contract method 0xd2d7231f.
//
// Solidity: function calculateReward(uint256 _missionNum) view returns((uint256,uint256,uint256,uint256))
func (_SpaceshipStaking *SpaceshipStakingCallerSession) CalculateReward(_missionNum *big.Int) (ISpaceshipStakingRewardInfo, error) {
	return _SpaceshipStaking.Contract.CalculateReward(&_SpaceshipStaking.CallOpts, _missionNum)
}

// MissionToUsersInvest is a free data retrieval call binding the contract method 0x25fbc80d.
//
// Solidity: function missionToUsersInvest(uint256 , address ) view returns(uint256 ships, uint256 BNBAmount)
func (_SpaceshipStaking *SpaceshipStakingCaller) MissionToUsersInvest(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (struct {
	Ships     *big.Int
	BNBAmount *big.Int
}, error) {
	var out []interface{}
	err := _SpaceshipStaking.contract.Call(opts, &out, "missionToUsersInvest", arg0, arg1)

	outstruct := new(struct {
		Ships     *big.Int
		BNBAmount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Ships = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.BNBAmount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// MissionToUsersInvest is a free data retrieval call binding the contract method 0x25fbc80d.
//
// Solidity: function missionToUsersInvest(uint256 , address ) view returns(uint256 ships, uint256 BNBAmount)
func (_SpaceshipStaking *SpaceshipStakingSession) MissionToUsersInvest(arg0 *big.Int, arg1 common.Address) (struct {
	Ships     *big.Int
	BNBAmount *big.Int
}, error) {
	return _SpaceshipStaking.Contract.MissionToUsersInvest(&_SpaceshipStaking.CallOpts, arg0, arg1)
}

// MissionToUsersInvest is a free data retrieval call binding the contract method 0x25fbc80d.
//
// Solidity: function missionToUsersInvest(uint256 , address ) view returns(uint256 ships, uint256 BNBAmount)
func (_SpaceshipStaking *SpaceshipStakingCallerSession) MissionToUsersInvest(arg0 *big.Int, arg1 common.Address) (struct {
	Ships     *big.Int
	BNBAmount *big.Int
}, error) {
	return _SpaceshipStaking.Contract.MissionToUsersInvest(&_SpaceshipStaking.CallOpts, arg0, arg1)
}

// Missions is a free data retrieval call binding the contract method 0x2c8fe526.
//
// Solidity: function missions(uint256 ) view returns(uint64 boardingTime, uint64 launchTime, uint64 duration, uint64 missionType, uint256 reward, uint256 spaceshipCost, uint256 missionPower, string description, string name, (address,string) nftInfo)
func (_SpaceshipStaking *SpaceshipStakingCaller) Missions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	BoardingTime  uint64
	LaunchTime    uint64
	Duration      uint64
	MissionType   uint64
	Reward        *big.Int
	SpaceshipCost *big.Int
	MissionPower  *big.Int
	Description   string
	Name          string
	NftInfo       ISpaceshipStakingNFTInfo
}, error) {
	var out []interface{}
	err := _SpaceshipStaking.contract.Call(opts, &out, "missions", arg0)

	outstruct := new(struct {
		BoardingTime  uint64
		LaunchTime    uint64
		Duration      uint64
		MissionType   uint64
		Reward        *big.Int
		SpaceshipCost *big.Int
		MissionPower  *big.Int
		Description   string
		Name          string
		NftInfo       ISpaceshipStakingNFTInfo
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.BoardingTime = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.LaunchTime = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.Duration = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.MissionType = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.Reward = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.SpaceshipCost = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.MissionPower = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.Description = *abi.ConvertType(out[7], new(string)).(*string)
	outstruct.Name = *abi.ConvertType(out[8], new(string)).(*string)
	outstruct.NftInfo = *abi.ConvertType(out[9], new(ISpaceshipStakingNFTInfo)).(*ISpaceshipStakingNFTInfo)

	return *outstruct, err

}

// Missions is a free data retrieval call binding the contract method 0x2c8fe526.
//
// Solidity: function missions(uint256 ) view returns(uint64 boardingTime, uint64 launchTime, uint64 duration, uint64 missionType, uint256 reward, uint256 spaceshipCost, uint256 missionPower, string description, string name, (address,string) nftInfo)
func (_SpaceshipStaking *SpaceshipStakingSession) Missions(arg0 *big.Int) (struct {
	BoardingTime  uint64
	LaunchTime    uint64
	Duration      uint64
	MissionType   uint64
	Reward        *big.Int
	SpaceshipCost *big.Int
	MissionPower  *big.Int
	Description   string
	Name          string
	NftInfo       ISpaceshipStakingNFTInfo
}, error) {
	return _SpaceshipStaking.Contract.Missions(&_SpaceshipStaking.CallOpts, arg0)
}

// Missions is a free data retrieval call binding the contract method 0x2c8fe526.
//
// Solidity: function missions(uint256 ) view returns(uint64 boardingTime, uint64 launchTime, uint64 duration, uint64 missionType, uint256 reward, uint256 spaceshipCost, uint256 missionPower, string description, string name, (address,string) nftInfo)
func (_SpaceshipStaking *SpaceshipStakingCallerSession) Missions(arg0 *big.Int) (struct {
	BoardingTime  uint64
	LaunchTime    uint64
	Duration      uint64
	MissionType   uint64
	Reward        *big.Int
	SpaceshipCost *big.Int
	MissionPower  *big.Int
	Description   string
	Name          string
	NftInfo       ISpaceshipStakingNFTInfo
}, error) {
	return _SpaceshipStaking.Contract.Missions(&_SpaceshipStaking.CallOpts, arg0)
}

// MissionsCount is a free data retrieval call binding the contract method 0xb6d25495.
//
// Solidity: function missionsCount() view returns(uint256)
func (_SpaceshipStaking *SpaceshipStakingCaller) MissionsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SpaceshipStaking.contract.Call(opts, &out, "missionsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MissionsCount is a free data retrieval call binding the contract method 0xb6d25495.
//
// Solidity: function missionsCount() view returns(uint256)
func (_SpaceshipStaking *SpaceshipStakingSession) MissionsCount() (*big.Int, error) {
	return _SpaceshipStaking.Contract.MissionsCount(&_SpaceshipStaking.CallOpts)
}

// MissionsCount is a free data retrieval call binding the contract method 0xb6d25495.
//
// Solidity: function missionsCount() view returns(uint256)
func (_SpaceshipStaking *SpaceshipStakingCallerSession) MissionsCount() (*big.Int, error) {
	return _SpaceshipStaking.Contract.MissionsCount(&_SpaceshipStaking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SpaceshipStaking *SpaceshipStakingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SpaceshipStaking.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SpaceshipStaking *SpaceshipStakingSession) Owner() (common.Address, error) {
	return _SpaceshipStaking.Contract.Owner(&_SpaceshipStaking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SpaceshipStaking *SpaceshipStakingCallerSession) Owner() (common.Address, error) {
	return _SpaceshipStaking.Contract.Owner(&_SpaceshipStaking.CallOpts)
}

// CreateMission is a paid mutator transaction binding the contract method 0xe2d18bee.
//
// Solidity: function createMission((uint64,uint64,uint64,uint64,uint256,uint256,uint256,string,string,uint256[],uint256[],(address,string)) _newMission) returns(bool)
func (_SpaceshipStaking *SpaceshipStakingTransactor) CreateMission(opts *bind.TransactOpts, _newMission ISpaceshipStakingMission) (*types.Transaction, error) {
	return _SpaceshipStaking.contract.Transact(opts, "createMission", _newMission)
}

// CreateMission is a paid mutator transaction binding the contract method 0xe2d18bee.
//
// Solidity: function createMission((uint64,uint64,uint64,uint64,uint256,uint256,uint256,string,string,uint256[],uint256[],(address,string)) _newMission) returns(bool)
func (_SpaceshipStaking *SpaceshipStakingSession) CreateMission(_newMission ISpaceshipStakingMission) (*types.Transaction, error) {
	return _SpaceshipStaking.Contract.CreateMission(&_SpaceshipStaking.TransactOpts, _newMission)
}

// CreateMission is a paid mutator transaction binding the contract method 0xe2d18bee.
//
// Solidity: function createMission((uint64,uint64,uint64,uint64,uint256,uint256,uint256,string,string,uint256[],uint256[],(address,string)) _newMission) returns(bool)
func (_SpaceshipStaking *SpaceshipStakingTransactorSession) CreateMission(_newMission ISpaceshipStakingMission) (*types.Transaction, error) {
	return _SpaceshipStaking.Contract.CreateMission(&_SpaceshipStaking.TransactOpts, _newMission)
}

// JoinToMission is a paid mutator transaction binding the contract method 0x4dc2fd6b.
//
// Solidity: function joinToMission(uint256 _missionNum, uint256 _spaceshipCount) payable returns(bool)
func (_SpaceshipStaking *SpaceshipStakingTransactor) JoinToMission(opts *bind.TransactOpts, _missionNum *big.Int, _spaceshipCount *big.Int) (*types.Transaction, error) {
	return _SpaceshipStaking.contract.Transact(opts, "joinToMission", _missionNum, _spaceshipCount)
}

// JoinToMission is a paid mutator transaction binding the contract method 0x4dc2fd6b.
//
// Solidity: function joinToMission(uint256 _missionNum, uint256 _spaceshipCount) payable returns(bool)
func (_SpaceshipStaking *SpaceshipStakingSession) JoinToMission(_missionNum *big.Int, _spaceshipCount *big.Int) (*types.Transaction, error) {
	return _SpaceshipStaking.Contract.JoinToMission(&_SpaceshipStaking.TransactOpts, _missionNum, _spaceshipCount)
}

// JoinToMission is a paid mutator transaction binding the contract method 0x4dc2fd6b.
//
// Solidity: function joinToMission(uint256 _missionNum, uint256 _spaceshipCount) payable returns(bool)
func (_SpaceshipStaking *SpaceshipStakingTransactorSession) JoinToMission(_missionNum *big.Int, _spaceshipCount *big.Int) (*types.Transaction, error) {
	return _SpaceshipStaking.Contract.JoinToMission(&_SpaceshipStaking.TransactOpts, _missionNum, _spaceshipCount)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SpaceshipStaking *SpaceshipStakingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SpaceshipStaking.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SpaceshipStaking *SpaceshipStakingSession) RenounceOwnership() (*types.Transaction, error) {
	return _SpaceshipStaking.Contract.RenounceOwnership(&_SpaceshipStaking.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SpaceshipStaking *SpaceshipStakingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _SpaceshipStaking.Contract.RenounceOwnership(&_SpaceshipStaking.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SpaceshipStaking *SpaceshipStakingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _SpaceshipStaking.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SpaceshipStaking *SpaceshipStakingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SpaceshipStaking.Contract.TransferOwnership(&_SpaceshipStaking.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SpaceshipStaking *SpaceshipStakingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SpaceshipStaking.Contract.TransferOwnership(&_SpaceshipStaking.TransactOpts, newOwner)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _missionNum) returns(bool)
func (_SpaceshipStaking *SpaceshipStakingTransactor) Withdraw(opts *bind.TransactOpts, _missionNum *big.Int) (*types.Transaction, error) {
	return _SpaceshipStaking.contract.Transact(opts, "withdraw", _missionNum)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _missionNum) returns(bool)
func (_SpaceshipStaking *SpaceshipStakingSession) Withdraw(_missionNum *big.Int) (*types.Transaction, error) {
	return _SpaceshipStaking.Contract.Withdraw(&_SpaceshipStaking.TransactOpts, _missionNum)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _missionNum) returns(bool)
func (_SpaceshipStaking *SpaceshipStakingTransactorSession) Withdraw(_missionNum *big.Int) (*types.Transaction, error) {
	return _SpaceshipStaking.Contract.Withdraw(&_SpaceshipStaking.TransactOpts, _missionNum)
}

// SpaceshipStakingMissionCreatedIterator is returned from FilterMissionCreated and is used to iterate over the raw logs and unpacked data for MissionCreated events raised by the SpaceshipStaking contract.
type SpaceshipStakingMissionCreatedIterator struct {
	Event *SpaceshipStakingMissionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SpaceshipStakingMissionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SpaceshipStakingMissionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SpaceshipStakingMissionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SpaceshipStakingMissionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SpaceshipStakingMissionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SpaceshipStakingMissionCreated represents a MissionCreated event raised by the SpaceshipStaking contract.
type SpaceshipStakingMissionCreated struct {
	Id   *big.Int
	Name string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterMissionCreated is a free log retrieval operation binding the contract event 0x280fd1c13afdf05ef9c7dbd512eed44cfa4545e4c471c2673baf1d275a3d8fd9.
//
// Solidity: event MissionCreated(uint256 indexed id, string name)
func (_SpaceshipStaking *SpaceshipStakingFilterer) FilterMissionCreated(opts *bind.FilterOpts, id []*big.Int) (*SpaceshipStakingMissionCreatedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _SpaceshipStaking.contract.FilterLogs(opts, "MissionCreated", idRule)
	if err != nil {
		return nil, err
	}
	return &SpaceshipStakingMissionCreatedIterator{contract: _SpaceshipStaking.contract, event: "MissionCreated", logs: logs, sub: sub}, nil
}

// WatchMissionCreated is a free log subscription operation binding the contract event 0x280fd1c13afdf05ef9c7dbd512eed44cfa4545e4c471c2673baf1d275a3d8fd9.
//
// Solidity: event MissionCreated(uint256 indexed id, string name)
func (_SpaceshipStaking *SpaceshipStakingFilterer) WatchMissionCreated(opts *bind.WatchOpts, sink chan<- *SpaceshipStakingMissionCreated, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _SpaceshipStaking.contract.WatchLogs(opts, "MissionCreated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SpaceshipStakingMissionCreated)
				if err := _SpaceshipStaking.contract.UnpackLog(event, "MissionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMissionCreated is a log parse operation binding the contract event 0x280fd1c13afdf05ef9c7dbd512eed44cfa4545e4c471c2673baf1d275a3d8fd9.
//
// Solidity: event MissionCreated(uint256 indexed id, string name)
func (_SpaceshipStaking *SpaceshipStakingFilterer) ParseMissionCreated(log types.Log) (*SpaceshipStakingMissionCreated, error) {
	event := new(SpaceshipStakingMissionCreated)
	if err := _SpaceshipStaking.contract.UnpackLog(event, "MissionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SpaceshipStakingMissionJoinedIterator is returned from FilterMissionJoined and is used to iterate over the raw logs and unpacked data for MissionJoined events raised by the SpaceshipStaking contract.
type SpaceshipStakingMissionJoinedIterator struct {
	Event *SpaceshipStakingMissionJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SpaceshipStakingMissionJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SpaceshipStakingMissionJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SpaceshipStakingMissionJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SpaceshipStakingMissionJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SpaceshipStakingMissionJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SpaceshipStakingMissionJoined represents a MissionJoined event raised by the SpaceshipStaking contract.
type SpaceshipStakingMissionJoined struct {
	MissionId      *big.Int
	Player         common.Address
	SpaceshipCount *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterMissionJoined is a free log retrieval operation binding the contract event 0xceb49b5adb5e3737df9e0679d210f1006878fb83bf58974f7279b0c79460898b.
//
// Solidity: event MissionJoined(uint256 indexed missionId, address indexed player, uint256 spaceshipCount)
func (_SpaceshipStaking *SpaceshipStakingFilterer) FilterMissionJoined(opts *bind.FilterOpts, missionId []*big.Int, player []common.Address) (*SpaceshipStakingMissionJoinedIterator, error) {

	var missionIdRule []interface{}
	for _, missionIdItem := range missionId {
		missionIdRule = append(missionIdRule, missionIdItem)
	}
	var playerRule []interface{}
	for _, playerItem := range player {
		playerRule = append(playerRule, playerItem)
	}

	logs, sub, err := _SpaceshipStaking.contract.FilterLogs(opts, "MissionJoined", missionIdRule, playerRule)
	if err != nil {
		return nil, err
	}
	return &SpaceshipStakingMissionJoinedIterator{contract: _SpaceshipStaking.contract, event: "MissionJoined", logs: logs, sub: sub}, nil
}

// WatchMissionJoined is a free log subscription operation binding the contract event 0xceb49b5adb5e3737df9e0679d210f1006878fb83bf58974f7279b0c79460898b.
//
// Solidity: event MissionJoined(uint256 indexed missionId, address indexed player, uint256 spaceshipCount)
func (_SpaceshipStaking *SpaceshipStakingFilterer) WatchMissionJoined(opts *bind.WatchOpts, sink chan<- *SpaceshipStakingMissionJoined, missionId []*big.Int, player []common.Address) (event.Subscription, error) {

	var missionIdRule []interface{}
	for _, missionIdItem := range missionId {
		missionIdRule = append(missionIdRule, missionIdItem)
	}
	var playerRule []interface{}
	for _, playerItem := range player {
		playerRule = append(playerRule, playerItem)
	}

	logs, sub, err := _SpaceshipStaking.contract.WatchLogs(opts, "MissionJoined", missionIdRule, playerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SpaceshipStakingMissionJoined)
				if err := _SpaceshipStaking.contract.UnpackLog(event, "MissionJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMissionJoined is a log parse operation binding the contract event 0xceb49b5adb5e3737df9e0679d210f1006878fb83bf58974f7279b0c79460898b.
//
// Solidity: event MissionJoined(uint256 indexed missionId, address indexed player, uint256 spaceshipCount)
func (_SpaceshipStaking *SpaceshipStakingFilterer) ParseMissionJoined(log types.Log) (*SpaceshipStakingMissionJoined, error) {
	event := new(SpaceshipStakingMissionJoined)
	if err := _SpaceshipStaking.contract.UnpackLog(event, "MissionJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SpaceshipStakingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the SpaceshipStaking contract.
type SpaceshipStakingOwnershipTransferredIterator struct {
	Event *SpaceshipStakingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SpaceshipStakingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SpaceshipStakingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SpaceshipStakingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SpaceshipStakingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SpaceshipStakingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SpaceshipStakingOwnershipTransferred represents a OwnershipTransferred event raised by the SpaceshipStaking contract.
type SpaceshipStakingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SpaceshipStaking *SpaceshipStakingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SpaceshipStakingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SpaceshipStaking.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SpaceshipStakingOwnershipTransferredIterator{contract: _SpaceshipStaking.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SpaceshipStaking *SpaceshipStakingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SpaceshipStakingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SpaceshipStaking.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SpaceshipStakingOwnershipTransferred)
				if err := _SpaceshipStaking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SpaceshipStaking *SpaceshipStakingFilterer) ParseOwnershipTransferred(log types.Log) (*SpaceshipStakingOwnershipTransferred, error) {
	event := new(SpaceshipStakingOwnershipTransferred)
	if err := _SpaceshipStaking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SpaceshipStakingRewardWithdrawnIterator is returned from FilterRewardWithdrawn and is used to iterate over the raw logs and unpacked data for RewardWithdrawn events raised by the SpaceshipStaking contract.
type SpaceshipStakingRewardWithdrawnIterator struct {
	Event *SpaceshipStakingRewardWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SpaceshipStakingRewardWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SpaceshipStakingRewardWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SpaceshipStakingRewardWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SpaceshipStakingRewardWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SpaceshipStakingRewardWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SpaceshipStakingRewardWithdrawn represents a RewardWithdrawn event raised by the SpaceshipStaking contract.
type SpaceshipStakingRewardWithdrawn struct {
	MissionId   *big.Int
	Player      common.Address
	InvestedTLM *big.Int
	RewardTLM   *big.Int
	InvestedBNB *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRewardWithdrawn is a free log retrieval operation binding the contract event 0x3f0d190fee71fcedf315c1a691ca936a8893467ce62d0bb52e5643ded084fe46.
//
// Solidity: event RewardWithdrawn(uint256 indexed missionId, address indexed player, uint256 investedTLM, uint256 rewardTLM, uint256 investedBNB)
func (_SpaceshipStaking *SpaceshipStakingFilterer) FilterRewardWithdrawn(opts *bind.FilterOpts, missionId []*big.Int, player []common.Address) (*SpaceshipStakingRewardWithdrawnIterator, error) {

	var missionIdRule []interface{}
	for _, missionIdItem := range missionId {
		missionIdRule = append(missionIdRule, missionIdItem)
	}
	var playerRule []interface{}
	for _, playerItem := range player {
		playerRule = append(playerRule, playerItem)
	}

	logs, sub, err := _SpaceshipStaking.contract.FilterLogs(opts, "RewardWithdrawn", missionIdRule, playerRule)
	if err != nil {
		return nil, err
	}
	return &SpaceshipStakingRewardWithdrawnIterator{contract: _SpaceshipStaking.contract, event: "RewardWithdrawn", logs: logs, sub: sub}, nil
}

// WatchRewardWithdrawn is a free log subscription operation binding the contract event 0x3f0d190fee71fcedf315c1a691ca936a8893467ce62d0bb52e5643ded084fe46.
//
// Solidity: event RewardWithdrawn(uint256 indexed missionId, address indexed player, uint256 investedTLM, uint256 rewardTLM, uint256 investedBNB)
func (_SpaceshipStaking *SpaceshipStakingFilterer) WatchRewardWithdrawn(opts *bind.WatchOpts, sink chan<- *SpaceshipStakingRewardWithdrawn, missionId []*big.Int, player []common.Address) (event.Subscription, error) {

	var missionIdRule []interface{}
	for _, missionIdItem := range missionId {
		missionIdRule = append(missionIdRule, missionIdItem)
	}
	var playerRule []interface{}
	for _, playerItem := range player {
		playerRule = append(playerRule, playerItem)
	}

	logs, sub, err := _SpaceshipStaking.contract.WatchLogs(opts, "RewardWithdrawn", missionIdRule, playerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SpaceshipStakingRewardWithdrawn)
				if err := _SpaceshipStaking.contract.UnpackLog(event, "RewardWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardWithdrawn is a log parse operation binding the contract event 0x3f0d190fee71fcedf315c1a691ca936a8893467ce62d0bb52e5643ded084fe46.
//
// Solidity: event RewardWithdrawn(uint256 indexed missionId, address indexed player, uint256 investedTLM, uint256 rewardTLM, uint256 investedBNB)
func (_SpaceshipStaking *SpaceshipStakingFilterer) ParseRewardWithdrawn(log types.Log) (*SpaceshipStakingRewardWithdrawn, error) {
	event := new(SpaceshipStakingRewardWithdrawn)
	if err := _SpaceshipStaking.contract.UnpackLog(event, "RewardWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
